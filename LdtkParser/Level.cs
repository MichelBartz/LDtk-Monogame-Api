using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using System.Collections.Generic;
using System.Linq;

namespace LdtkParser
{
    public enum LayerType
    {
        Tiles,
        IntGrid,
        Entities
    };

    public enum Direction
    {
        North,
        East,
        South,
        West,
        Invalid
    }

    public class Level
    {
        public int Uid { get; }
        public string LevelName { get; }
        public int WorldX { get; }
        public int WorldY { get; }
        public Texture2D BackgroundImage { get; }
        public Point BackgroundPosition { get; }

        public int Width { get; }
        public int Height { get; }

        private readonly List<Neighbour> neighbours;

        private readonly List<ILayer> layers;

        public Level(int uid, string name, int worldX, int worldY, int width, int height)
        {
            Uid = uid;
            LevelName = name;
            WorldX = worldX;
            WorldY = worldY;
            Width = width;
            Height = height;

            layers = new List<ILayer>();
            neighbours = new List<Neighbour>();
        }
        public Level(int uid, string name, int worldX, int worldY, int width, int height, Texture2D background, Point bgPosition)
        {
            Uid = uid;
            LevelName = name;
            BackgroundImage = background;
            BackgroundPosition = bgPosition;
            WorldX = worldX;
            WorldY = worldY;
            Width = width;
            Height = height;

            layers = new List<ILayer>();
            neighbours = new List<Neighbour>();
        }

        public void AddNeighbour(int uid, string direction)
        {
            var n = new Neighbour(uid, direction);
            // We ignore invalid neighbours
            if (n.Dir != Direction.Invalid) {
                neighbours.Add(n);
            }
        }

        /// <summary>
        /// Returns the level UID for the neighbour in the bearing
        /// </summary>
        /// <param name="dir">The direction of the neighbour (North, East, South, West) as generated by LDtk</param>
        /// <returns>The uid for the given neighbour or -1 if not found.</returns>
        public int GetNeighbourUid(Direction dir)
        {
            Neighbour n = neighbours.Find(n => n.Dir.Equals(dir));
            if (n != null)
            {
                return n.Uid;
            }
            return -1;
        }
        public void AddLayer(ILayer layer)
        {
            layers.Add(layer);
        }

        /// <summary>
        /// Returns layers where T can be Tiles, IntGrid, Entities.
        /// </summary>
        /// <typeparam name="T">An ILayer type (Tiles, IntGrid, Entities)</typeparam>
        /// <returns>All found layers</returns>
        public IEnumerable<T> GetLayers<T>() => layers.OfType<T>();

        /// <summary>
        /// Returns the layer of given name if found
        /// </summary>
        /// <typeparam name="T">An ILayer type (Tiles, IntGrid, Entities)</typeparam>
        /// <param name="name">The name of the layer</param>
        /// <returns>A layer</returns>
        public T GetLayerByName<T>(string name) where T: ILayer => layers.OfType<T>().ToList<T>().Find(l => l.Name.Equals(name));
    }
}
